//型:https://qiita.com/yukina-ge/items/98fe190cef2024d45fbd
//書き方:https://qiita.com/Captain_Blue/items/b7a1f4a42f48559fac0c

syntax = "proto3";
option csharp_namespace ="Server.gRPC";
package gRPC;

// 【命名規則】
//* 接頭辞
//(2はtoを文字っている)
// CL → SV : C2S ※(Client to Server)
// SV → CL : S2C ※(Server to Client)
//
// 下記のどちらかの組み合わせを採用する
//
//--リクエスト--
// 要求 : Request
//  ↓
// 返答 : Response
//
//--送受信--
// 送信 : Send
//  ↓
// 受信 : Receive

//*****************************************************************
// まとめ
//*****************************************************************
// CL → SV
// C2S_xxx_Request  : CLからSVに要求
// S2C_xxx_Response : SVがCLの要求に対してデータを返す
// 
// SV → CL
// S2C_xxx_Request  : SVからCLに要求
// C2S_xxx_Response : CLがSVの要求に対してデータを返す
//*****************************************************************

//*****************************************************************
// RPCインターフェイス : プロトコル(関数)の定義はここに書いていく。
// ※サービスの定義を一つにまとめる場合、今回は通信方式毎にサービスを
//   分けるので使わない。
//*****************************************************************
//service Online{
//    //-----------------------------------------------------------------
//    // Unary : 1対1
//    //-----------------------------------------------------------------
//    rpc UnaryPing(C2S_Ping_Request) returns (S2C_Ping_Response){} // CL→SV:Ping
//
//    //-----------------------------------------------------------------
//    // SVストリーミング : SV多 対 CL1
//    //-----------------------------------------------------------------
//
//    //-----------------------------------------------------------------
//    // CLストリーミング : SV1 対 CL多
//    //-----------------------------------------------------------------
//
//    //-----------------------------------------------------------------
//    // 双方向ストリーミング : SV多 対 CL多
//    //-----------------------------------------------------------------
//    rpc DuplexChat(stream DuplexChatSend) returns (stream DuplexChatReceive){}
//}

//*****************************************************************
// Common : 汎用型
//*****************************************************************

// 結果
message Reslut{
    sint32 error_level=1;
}

//*****************************************************************
// Unary : 1対1
//*****************************************************************

// CL→SV:Pingリクエスト
message C2S_Ping_Request{}

// SV→CL:Pingレスポンス
message S2C_Ping_Response{
    double ping=1;
}

service Unary{
    // 単項Ping
    rpc Ping(C2S_Ping_Request) returns (S2C_Ping_Response){} // CL→SV:Ping
}
//*****************************************************************
// SVストリーミング : SV多 対 CL1
//*****************************************************************

// CL→SV:チャットリクエスト
message ChatRequest{
    uint32 userID=1;
    string message=2;
}

// SV→CL:チャットレスポンス
message ChatResponse{
    uint32 userID=1;
    string message=2;
}

service ServerStreaming{
    
}

//*****************************************************************
// CLストリーミング : SV1 対 CL多
//*****************************************************************
service ClientStreaming{
    
}

//*****************************************************************
// 双方向ストリーミング : SV多 対 CL多
//*****************************************************************

// CL→SV:双方向チャットリクエスト
message DuplexChatSend{
    uint32 userID=1;
    string message=2;
}

// SV→CL:双方向チャットレスポンス
message DuplexChatReceive{
    uint32 userID=1;
    string message=2;
    uint32 hash=3;
}

service BidirectionalStreaming{
    // 双方向チャット
    rpc DuplexChat(stream DuplexChatSend) returns (stream DuplexChatReceive){}
}